<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>yao: installation</title>
<script type="text/javascript" src="scripts.js">void=null;</script>
<link rel="stylesheet" href="styles.css" type="text/css">
</head>
<body>


<div id="content">

<h1>yao</h1>

<div id="links">
<p><b>Links</b></p>
<a href="aosimul.html">Main page</a><br>
<a href="installation.html">Installation</a><br>
<ul class="linkpacked">
<li><a href="#fromSources">From Sources</a>
<li><a href="#fromBinaries">From Binaries</a>
<li><a href="#InstallingFFTW3">Installing FFTW3</a>
<li><a href="#OsXYorickCompilation">Compile Yorick on OsX</a>
</ul>
<a href="examples.html">Examples and Scripts</a><br>
<a href="performance.html">Performance</a><br>
<a href="data-structures.html">Data structures and parfiles</a><br>
<a href="feature-control.html">Controlling Features</a><br>
<a href="screenshots.html">Screenshots</a><br>
<a href="algorithms.html">Algorithms</a><br>
<a href="ytkcontrol.html">Yao tk dynamic control</a><br>
<a href="weblog.html">News/Weblog</a><br>
</div>


<h2>Installation</h2>

Installation presupposes a basic familiarity with the command line
environment. In the following, I give instructions that should be
enough to get you out of troubles.  

<p>If you want to install Yao on an Apple machine and do not want to
go through the trouble of installing from source, jump <a
href="#fromBinaries">here</a>.

<p>Thanks to Yorick, Yao runs on a variety of *nix platforms. The
installation ranges from straighforward (installing binaries on an
apple platform) to moderately complex.

The following gives a <font class="highlight">summary</font> of what
your options are and <font class="highlight">what you will need to
install</font>:

<ul>
<li>On a <font class="highlight">Macintosh</font>:
<ul>
<li>From binaries (everything included: yao_mac_binaries.tgz) 
<li>From source:
<ul>
<li>Yorick distribution (yorick-1.6.01.tgz) if you don't already have
yorick installed.  
<li>Yao package (yao.tar.gz). This includes ytk.
<li>FFTW if you select to run yao_fftw.
</ul>
</ul>
<li>On a <font class="highlight">Linux/Unix machine </font>(from source):
<ul>
<li>Yorick distribution (yorick-1.6.01.tgz) if you don't already have
yorick installed.  
<li>Yao package (yao.tar.gz). This includes ytk.
<li>FFTW
</ul>
<li>On top of that, you will have to have 
<font class="highlight">tcltk</font> installed to use yaotk (optional).
</ul>

<p>Once you are done with the installation, go to the <a
href="examples.html">Examples & Scripts</a> page.

<a name="fromSources"></a>
<h2>Install from sources</h2>

<ol class="spaced">

<li>Download the latest Yorick distribution from the <a
href="../yorick/doc/index.html">yorick
site</a> (here is a copy of <a
href="../yorick/yorick-1.6.01.tgz">yorick-1.6.01.tgz</a>). Installation is
straighforward (see the README file in the main distribution
directory). I suggest you
install yorick in <code>~/yorick-1.6</code> (just put
<code>yorick-1.6.01.tgz</code> in your home directory, gunzip and
untar). If you already have yorick installed you may of course skip
this last point.


<li>Once you have yorick compiled, checked and installed (in essence:
<code>make config; make; make check; make install;</code>, see this 
<a href="#OsXYorickCompilation">link</a> for details on how to 
compile on OsX machines), download
<a href="yao.tar.gz">yao.tar.gz</a>.  

<li>Create a directory "contrib" in the main yorick directory
(<code>~/yorick-1.6/contrib</code>). Put <code>yao.tar.gz</code> in
the contrib directory. Gunzip and untar (<code>gunzip yao.tar.gz; tar
xvf yao.tar;</code>).

<li>Copy the graphic style file directory where it belongs:
<pre>
mv ~/yorick-1.6/contrib/Gist ~/.
</pre>
or just copy the graphic files into the main distribution directory:
<pre>
cp ~/yorick-1.6/contrib/Gist/* ~/yorick-1.6/g/.
</pre>

at this point you may want to create a yorick user's directory, copy
the yao example directory in there and create a directory for the
phase screens:
<pre>
mkdir ~/Yorick
cp -pR ~/yorick-1.6/contrib/yao/examples ~/Yorick/examples
mkdir ~/Yorick/data
</pre>
<li>Compile the Yao package.
<ul>
<li><font class="highlight">Apple platforms</font> (anything
running OsX):
<ul>
<li>You will need to have a C compiler installed. The vanilla version
of OsX does not come with one. Install the Developer tools, normally
provided on a CD with your OsX distribution.
        
<li>Yorick's graphics run on Xwindows. You need apple's X11.app or
Xfree86 installed and started.

<li><code>cd ~/yorick-1.6/contrib/yao/yao_veclib</code>

<li>All instructions to compile and link yao are in the README
file. Just cut and paste from there. Note that if you elect to run the 
FFTW version of yao (I don't see why, as the veclib version is 
simpler to install and faster), you may have to edit the Makefile 
to point to your
fftw3 include and lib directories. Instructions are in the README file.
Basically, the whole process boils down to (you may want to set the
environment variable COPTIONS or specify the COPTIONS on the make 
plugin line, see the README file):
<pre>
yorick -batch make.i
make plugin
make check-plug
make install-plug
</pre>
You will have to edit the Makefile and modify the YORICK_EXE
variable to point to the yorick executable (see the README file).

<li>You are set.
</ul>
    
<li><font class="highlight">Linux platform</font>:
<ul>
<li>You will need to install FFTW3 before you install Yao. This <a
href="#InstallingFFTW3">link</a> will guide you. Once it is done,
proceed to the next step.

<li><code>cd ~/yorick-1.6/contrib/yao/yao_fftw</code>

<li>All instructions to compile and link yao are in the README
file. Just cut and paste from there. It 
boils down to:
<pre>
yorick -batch make.i
make plugin
make check-plug
make install-plug
</pre>

You will most probably have to edit the Makefile to point to your FFTW3
distribution (you'll need to update YORICK_EXE as well, see README).

<li>You are set. Before running yao, you should however go through
some initialization of FFTW. On each machine, FFTW can be optimized to
run as fast as possible. To do that, the code goes through many (or
all) possible factorization for any given array dimension. This has to
be done only once. I have written a small routine to do that. Follow
this <a href="#fftw_wisdom">link</a>. If you don't do that I believe
yao will still run but in a non-optimized mode (somwwhat slower).

</ul>
</ul>
</ol>

<a name="fromBinaries"></a>
<h2>Install the Binaries (Apple only)</h2>

The binary distribution includes both yorick-1.6.01, Yao and ytk. Do
not install from binaries if you already have yorick installed.

<p>Given the variety of Linux platforms and versions, I do not provide
binaries for Linux. Also, Yao on Linux needs FFTW, which is a pretty
big download which I did not want to include in a binary
distribution. In any case, it's much better that you compile the
package on your own platform to get the best results.

<p>The following will install Yorick and Yao:
<ol class="spaced">

<li>Download the tarball <a href="yao_mac_binaries.tgz">
yao_mac_binaries.tgz</a> and move it to your home directory.

<li>gunzip and untar.

<li>You should now have a yorick-1.06-01 directory, which contains the
binary yorick distribution and the yao plugin.

<li>For convenience, you should create a symlink to the yorick executable 
somewhere in your path, e.g. (I have mine in ~/bin):
<pre>
cd ~/bin
ln -s ~/yorick-1.6-01/bin/yorick ./yorick
</pre>

<li>You are done. Test it:
<ul>

<li>In a terminal, type "rehash" (if you have tcsh) or open a new
Terminal/xterm to make you shell aware of the newly created "yorick"
file

<li>type "yorick". You should get this message:

<pre>
% yorick
 Copyright (c) 1996.  The Regents of the University of California.
 All rights reserved.  Yorick 1.6.01 ready.  For help type 'help'
> 
</pre>

If you do, you are in business. Type "quit" to exit yorick. 
You may want to run the test package
to check that everything runs smoothly:

<pre>
cd ~/yorick-1.6-01/contrib/yao/examples
yorick -batch test-all.i
</pre>
This might take a few minutes. It first creates phase screen for the
simulations and then run a few test cases (shack-hartmann and
curvature systems, with NGS and LGS). If all goes well, it should end with the message "All Tests OK".


You can proceed with the <a
href="examples.html">Examples and Scripts</a> page
</ul>
</ol>

<a name="InstallingFFTW3"></a>
<h2>Installing FFTW3</h2>

<ol>

<li>The package can be obtained from <a
href="http://www.fftw.org/download.html">www.fftw.org</a>. Download
the vectorial version (Enabling the use of SIMD or Altivec), <a
href="http://www.fftw.org/fftw-3.0.1-fma.tar.gz">fftw-3.0.1-fma.tar.gz</a>. Gunzip
and untar.

<li>Configure and compile. You have to use special compilation flags
to enable the use of the vectorial processor on your machine (if you
have any). Also, you have to enable fftw3f, i.e. float operation (yao
uses floats for FFTs). --enable-float enables float operations.

<p>If you don't have root privilege, you can install fftw3
locally. Use the --prefix to do that (see an example below)

<p>Each machine takes different flags. A good resource to find out
which one you should use is the speed benchmark pages at fftw.org (<a
href="http://www.fftw.org/speed/">http://www.fftw.org/speed/</a>)
i.e. <a
href="http://www.fftw.org/speed/g5-2GHz/">http://www.fftw.org/speed/g5-2GHz/</a>
for the G5.

<p>For an Dual Ahtlon, I used:

<pre>
./configure --enable-float --enable-k7 CFLAGS="-O2 -fomit-frame-pointer -Wall -W
  -Wcast-qual -Wpointer-arith -Wcast-align -pedantic -malign-double -fstrict-aliasing
  -mpreferred-stack-boundary=4 -mcpu=pentiumpro" -prefix="/home/frigaut/fftw3/"</pre>

The <code>-prefix="/home/frigaut/fftw3/"</code> points to the local
installation directory. Use this if you don't have the root password
to install stuff in /usr/local/ on your system. If you do have root
privileges, you might as well not use the <code>--prefix</code> flag
and run the <code>make install</code> as root, which will install
fftw3 in <code>/usr/local</code>.

<p>For a G5, I use:
<pre>
./configure --enable-float --enable-altivec CFLAGS="-O3 -fomit-frame-pointer 
  -fstrict-aliasing -mcpu=970 -mtune=970 -mpowerpc-gpopt"</pre>

<p>For a G4:
<pre>
./configure --enable-float --enable-altivec CFLAGS="-O3 -fomit-frame-pointer 
  -mcpu=7450 -faltivec"</pre>

<li>Then:
<pre>
make
make install
</pre>
or <code>sudo make install</code> to install as root.
</ol>

<a name="OsXYorickCompilation"></a>
<h2>Compiling Yorick on OsX</h2>

<p>These notes apply to Panther. I haven't tested it with 10.2, but there 
should be no major issues.

<p>You will need to have a C compiler installed. The vanilla version
of OsX does not come with one. Install the Developer tools, normally
provided on a CD with your OsX distribution.

<p><b>Note</b>: if you are using a Panther version < 10.3.4, there is a 
bug in the system libm that breaks yorick SIGFRE delivery (ability to detect 
and thus prevent NaNs). I strongly advise to upgrade to 10.3.4 or later if 
you have the option. Otherwise, there are ways around it (David Munro 
described it all in this <a href="MacOS103-bug.txt">file</a>). I'm not going 
to expand on it further, as this has been fixed since 10.3.4.

<p>The process of building Yorick is otherwise very simple. Basically, you do:

<pre>cd ~/yorick-1.6/
make config
make
make check (X11 need to be started at this point)
make install
</pre>
<p>The executable is in <code>~/yorick-1.6/Darwin-Power_Macinstosh/bin/</code>.

<p>You can gain a few percent speed by tweaking some flags during the 
compilation. Use:
<pre>
make COPTIONS="some flags"
</pre>

<p>Alternatively, you can edit Make.cfg after the <code>make
config</code>, or you can set the environment variable
<code>CFLAGS</code> before doing the <code>make config</code>.  

<p>I personaly use 
<pre>COPTIONS="-O3 -fomit-frame-pointer -fstrict-aliasing -mcpu=970 -mtune=970 -mpowerpc-gpopt"</pre>
for the G5, and
<pre>COPTIONS="-O3 -fomit-frame-pointer -mcpu=7450"</pre>
for the G4.


Back to "<a href="#fromSources">Installation from Sources</a>".

<a name="fftw_wisdom"></a>
<h2>Running FFTW_wisdom</h2>

If you are running using FFTW, you need to initialize/optimize FFTW
for your hardware (valid only on one machine!).

Start yao. The first time you run it, you should have the following
message :

<pre>
frigaut:yao_fftw% ./yao
 I did not find a fftw_wisdom.dat file in ~/Yorick/
 When you have a minute (actually it takes several hours), run:

 init_fftw_wisdom; (default)

 or init_fftw_wisdom,nlimit; (run optimization up to n^nlimit)

 Copyright (c) 1996.  The Regents of the University of California.
 All rights reserved.  Yorick 1.6.01 ready.  For help type 'help'
> 
</pre>

<p>At this time you can choose to do it (run
<code>init_fftw_wisdom</code>). Because it can take several hours, you
can also choose to postpone it to the next night. But you will need to
run before doing any serious work with yao (fftw version). To test if
everything is okay, you can run now init_fftw_wisdom up to a low power
of 2, e.g.

<pre>
> init_fftw_wisdom,8
</pre>

<p>which will optimize fftw for array up to 128x128. That will get you
going. Remember that when you have time, you should run the full monty
(<code>init_fftw_wisdom</code>). Before you can run
<code>init_fftw_wisdom</code> again, you need to delete the
fftw_wisdom file (<code>~/Yorick/fftw_wisdom.dat</code>).

<a name="directory_organization"></a>
<h2>A note on directory organization</h2>

<p>As already said, I advise to install yorick in
<code>~/yorick-1.6</code>

<p>The root directory of Yao is in
<code>~/yorick-1.6/contrib/yao</code>

<p>You will have to create <code>~/Yorick</code>, which is the yorick user 
directory. It is convenient to put every yao user files in there. For 
instance, you can copy the <code>yao/examples</code> directory somewhere 
in <code>~/Yorick</code>. I have also my data directory (the one containing 
the phase screens for yao, see the <a href="examples.html">
Examples & Scripts</a> page) in <code>~/Yorick/data</code>.

<p>

</div>
Page updated on UT $Date: 2007-12-12 23:29:36 $
<p>
 <a href="http://jigsaw.w3.org/css-validator/">
  <img style="border:0;width:88px;height:31px"
       src="http://jigsaw.w3.org/css-validator/images/vcss" 
       alt="Valid CSS!">
 </a>
</p>
</body>
</html>
