// YAO parameter file
//-------------------------------
sim.name           = "Pyramid w/ TT mirror and WFS, full diffraction WFS";
sim.pupildiam      = 80; //This is the pupil diameter in pixel, original version 80 pixels. but we want to compare with the SHWFS, which consists of 24 pixels.
sim.debug          = 0;
sim.verbose        = 1; //The amount of information you get during the aoinit. 0, means you get no feedback at all except for warnings and error messages; 1 will print out a lot of information.

//-------------------------------
atm.dr0at05mic     = 43.33;  // This is r0=0.15m, D/r0=6.5m/0.15m=43.33. The diameter of the atmosphere over the critial length of the atmosphere turbulence.
atm.screen	       = &("~/.yorick/data/screen"+["1","2","3","4"]+".fits");// Default values from the atmosphere.
atm.layerfrac      = &([0.4,0.2,0.3,0.1]);
atm.layerspeed     = &([11.,20,29,35]);
atm.layeralt	   = &([0.,400,6000,9000]);
atm.winddir        = &([0,0,0,0]);

//-------------------------------
nwfs               = 1; // number of WFSs (=1, single object adaptive optics; >1 if e.g. mcao multi-conjugate adaptive optics)
wfs = array(wfss,nwfs);

n   = 1;
wfs(n).type	       = "pyramid";
wfs(n).lambda	   = 0.65;// All the information related to the wfs should be in band centred in 650 nm. R band.
wfs(n).gspos       = [0.,0.];
wfs(n).gsalt       = 0.;
wfs(n).gsmag       = 5.;
wfs(n).skymag      = 17.9;// see https://www.gemini.edu/sciops/telescopes-and-sites/observing-condition-constraints/optical-sky-background for reference. Bright sky with full moon, the equivalent number of photons received by one arcsec^2.
wfs(n).noise       = 1; //whether the noise could be switched on or off
wfs(n).ron         = 3.7;

//---------------------- Not Clear yet....--------------
wfs(n).shnxsub	   = 40;  //# of subapertures in telescope diameter, in 1D direction, but this should be the result from the previous one... number of pixels in each sub-aperture.
wfs(n).npixpersub   = 2;// Pupil plane. # of pixels per sub-aperture. wfs.npixpersub * wfs.shnxsub = 2*40 = 80   
wfs(n).fssize       = 1.5;//calculated from lambda/(diameter/sim.pupil)=650nm/(6.5m/80) = 1.65
wfs(n).fstop        = "round"; // The field stop size and shape are mentioned in paper McGuire 1999, abstract. 
wfs(n).pyr_mod_ampl = 0.4;// 5*lambda/D = 5*650*10^(-9)/6.5=1.031 arcsec. float .... what is the modulation amplitude.... - - 
//10*lambda/D
wfs(n).pyr_mod_npts = 20;// 5*lambda/D*2*pi/(2 lambda/D), number of points in a circle.; square, we will result in 5*sqrt(2)/2=3.5 and we take 3. type: long........... 4 has the best strehl ratio.
wfs(n).pyr_mod_loc  = "after";// the modulation is placed after the field stop.

//-------------------------------
ndm                = 1;
dm = array(dms,ndm);

n  =1;
dm(n).type	       = "zernike";// Type zernike, because the number of the actuators 336 is larger than the number of the measurements 132*2(number of pixels times the two directions x and y).
dm(n).nzer         = 80;// # of zernike modes.
dm(n).pitch	       = 7;//

//-------------------------------
mat.condition      = &([15.]);
mat.file	       = "";
//-------------------------------
tel.diam	       = 6.5; // Diameter of MMT.
tel.cobs	       = 0.1; // 64cm/6.5m = 0.1
//-------------------------------
target.lambda	   = &([1.65]);// The wavelength of the science camera detector, unit micron.
target.xposition   = &([0.]);
target.yposition   = &([0]);
target.dispzoom    = &([1.]);
//-------------------------------
gs.zeropoint	   = 3.255e11;//calibrate Photometric zero point (#photons@pupil/s/full_aper, mag0 star). See evernote, this calculated in R band.
//-------------------------------
loop.gain	       = 0.6;
loop.framedelay    = 2; //Loop delay (# of frames). Regular CCD 1 frame integration -> framedelay=1 + readout & Calculation -> framedelay=2. Because there is 1.6ms Frame Rate, 1.596 ms read time; so the framedelay is calculated as 1+readoutdelay/itime-> 1+1.596/1.6=2
loop.niter	       = 1000; //Total number of iterations.
loop.ittime	       = 1e-3; //Iteration time (sampling time), unit second.
loop.modalgainfile = "simulModeGains.fits";
//-------------------------------
